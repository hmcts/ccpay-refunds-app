server:
  port: 8084
spring:
  application:
    name: refunds-api

  main:
    allow-bean-definition-overriding: true
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/refunds
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    properties:
      charSet: UTF-8
  jpa:
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
  liquibase:
    enabled: ${SPRING_LIQUIBASE_ENABLED:true}
    change-log: classpath:/db/changelog/db.changelog-master.xml

  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: http://localhost:5000/o
        # Dummy OIDC client required even we are not going to use
        registration:
          oidc:
            client-id: internal
            client-secret:  ${OIDC_S2S_SECRET}
oidc:
  audience-list: internal,paybubble,refunds,payments
  issuer: ${OIDC_ISSUER:http://fr-am:8080/openam/oauth2/hmcts}

auth:
  provider:
    service:
      client:
        baseUrl: http://localhost:8084
  idam:
    client:
      baseUrl: http://localhost:8085
azure:
  application-insights:
    instrumentation-key: ${APPINSIGHTS_INSTRUMENTATIONKEY:}
idam:
  api:
    url: ${IDAM_API_URL:http://localhost:5000}
  s2s-authorised:
    services: payment_app,ccpay_bubble,api_gw,ccd_gw,xui_webapp
  s2s-auth:
    url: http://localhost:8085
    totp_secret: ${OIDC_S2S_SECRET:}
    microservice: payment_app

#Launch Darkly Config
launch:
  darkly:
    sdk:
      key: ${LAUNCH_DARKLY_SDK_KEY:}
    user:
      name: ${LAUNCH_DARKLY_USER_NAME_PREFIX:dummy}@feesandpay.com

launchDarkly:
  connectionTimeout: 3
  socketTimeout: 3
  flushInterval: 10

payments:
  api:
    url: ${PAYMENT_API_URL:http://localhost:8095}

reconciliation-provider:
  api:
    url: ${LIBERATA_BASE_URL:https://lascustomerportaluat.liberata.com}
  refund-status-update-path: ${REFUND_STATUS_UPDATE_PATH:/refunds-api/refunds}
liberata:
  oauth2:
    client:
      id: ${LIBERATA_OAUTH2_CLIENT_ID:id}
      secret: ${LIBERATA_OAUTH2_CLIENT_SECRET:}
    username: ${LIBERATA_OAUTH2_USERNAME:}
    password: ${LIBERATA_OAUTH2_PASSWORD:}
    authorize:
      url: ${LIBERATA_OAUTH2_AUTHORIZE_URL:https://bpacustomerportal.liberata.com/pba/public/oauth/authorize}
    token:
      url: ${LIBERATA_OAUTH2_TOKEN_URL:https://bpacustomerportal.liberata.com/pba/public/oauth/token}
  api:
    key: ${LIBERATA_API_KEY:}


refunds:
  serviceAccount:
    clientId: ${REFUND_SERVICE_ACCOUNT_CLIENT_ID:}
    clientSecret: ${REFUND_SERVICE_ACCOUNT_CLIENT_SECRET:}
    grantType:  ${REFUND_SERVICE_ACCOUNT_GRANT_TYPE:}
    username: ${REFUND_SERVICE_ACCOUNT_USERNAME:}
    password: ${REFUND_SERVICE_ACCOUNT_PASSWORD:}
    scope: ${REFUND_SERVICE_ACCOUNT_SCOPE:}
    redirectUri: ${REFUND_SERVICE_ACCOUNT_REDIRECT_URI:}

notification:
  url: ${NOTIFICATION_API_URL:http://localhost:8185}
  letter-path: ${NOTIFICATION_LETTER_PATH:/letterNotification}
  email-path: ${NOTIFICATION_EMAIL_PATH:/emailNotification}
  email-to-reply: ${EMAIL_TO_REPLY:}
  service-mailbox: ${SERVICE_MAIL_BOX:}
  service-url: ${SERVICE_URL:http://service}

logging:
  level:
    org:
      springframework:
        web: DEBUG

refund:
  search:
    days: 7
