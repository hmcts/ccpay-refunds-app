
management:
  endpoint:
    jmx:
      exposure:
        include: "health"
    web:
      base-path: "/"
    health:
      show-details: "always"
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus

#If you use a database then uncomment below lines and update db properties accordingly
spring:
  application:
    name: refunds-api
  main:
    allow-bean-definition-overriding: true
  config:
    import: "optional:configtree:/mnt/secrets/ccpay/"
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_NAME:refunds}${POSTGRES_CONNECTION_OPTIONS:}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    properties:
      charSet: UTF-8
    tomcat:
      max-active: 10
      max-idle: 10
      min-idle: 2
      max-wait: 10000
      test-on-borrow: true
      test-on-connect: true
      test-on-idle: true
      validation-query: "SELECT 1"
      time-between-eviction-runs-millis: 10000
      test-while-idle: true
      test-on-return: true
      remove-abandoned: true
      remove-abandoned-timeout: 60
      log-abandoned: true
      abandon-when-percentage-full: 0
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${ISSUER_URI}
        # Dummy OIDC client required even we are not going to use
        registration:
          oidc:
            client-id: ${OIDC_CLIENT_ID}
            client-secret: ${OIDC_CLIENT_SECRET}
  jpa:
    properties:
      hibernate:
        jdbc:
          lob:
            # silence the 'wall-of-text' - unnecessary exception throw about blob types
            non_contextual_creation: true


security:
  anonymousPaths:
    - "/health"
    - "/health/liveness"
    - "/health/readiness"
    - "/actuator/**"
    - "/loggers/**"
    - "/swagger-ui.html"
    - "/swagger-resources/**"
    - "/v2/api-docs"
    - "/webjars/springfox-swagger-ui/**"
    - "/search/**"
#    hikari:
#      minimumIdle: 2
#      maximumPoolSize: 10
#      idleTimeout: 10000
#      poolName: {to-be-defined}HikariCP
#      maxLifetime: 7200000
#      connectionTimeout: 30000


trusted:
  s2s:
    service:
      names: payment_app,ccpay_bubble,api_gw,ccd_gw,xui_webapp
auth:
  idam:
    client:
      baseUrl: ${AUTH_IDAM_CLIENT_BASEURL}
  provider:
    service:
      client:
        baseUrl: ${AUTH_PROVIDER_SERVICE_CLIENT_BASEURL}
oidc:
  audience-list: ${OIDC_AUDIENCE_LIST}
  issuer: ${OIDC_ISSUER}

azure:
  application-insights:
    instrumentation-key: ${APPINSIGHTS_INSTRUMENTATIONKEY:}

idam:
  api:
    url: ${IDAM_API_URL:https://idam-api.aat.platform.hmcts.net}
  s2s-authorised:
    services: ${S2S_AUTHORISED_SERVICES}
  s2s-auth:
    url: ${AUTH_PROVIDER_SERVICE_CLIENT_BASEURL}
    totp_secret: ${OIDC_S2S_SECRET}
    microservice: ${OIDC_S2S_MICROSERVICE_NAME}

refunds:
  serviceAccount:
    clientId: ${REFUND_SERVICE_ACCOUNT_CLIENT_ID:}
    clientSecret: ${REFUND_SERVICE_ACCOUNT_CLIENT_SECRET}
    grantType:  ${REFUND_SERVICE_ACCOUNT_GRANT_TYPE:}
    username: ${REFUND_SERVICE_ACCOUNT_USERNAME:idam.user.ccpayrefundsapi@hmcts.net}
    password: ${REFUND_SERVICE_ACCOUNT_PASSWORD}
    scope: ${REFUND_SERVICE_ACCOUNT_SCOPE:openid profile roles search-user}
    redirectUri: ${REFUND_SERVICE_ACCOUNT_REDIRECT_URI:http://ccpay-refunds-api-demo.service.core-compute-demo.internal/oauth2/callback}


#Launch Darkly Config
launch:
  darkly:
    sdk:
      key: ${LAUNCH_DARKLY_SDK_KEY:}
    user:
      name: ${LAUNCH_DARKLY_USER_NAME_PREFIX:dummy}@feesandpay.com

launchDarkly:
  connectionTimeout: 3
  socketTimeout: 3
  flushInterval: 10

payments:
  api:
    url: ${PAYMENT_API_URL:http://localhost:8095}


reconciliation-provider:
  api:
    url: ${LIBERATA_BASE_URL:https://lascustomerportaluat.liberata.com}
  refund-status-update-path: ${REFUND_STATUS_UPDATE_PATH:/refunds-api/refunds}

liberata:
  oauth2:
    client:
      id: ${LIBERATA_OAUTH2_CLIENT_ID:id}
      secret: ${LIBERATA_OAUTH2_CLIENT_SECRET:}
    username: ${LIBERATA_OAUTH2_USERNAME:}
    password: ${LIBERATA_OAUTH2_PASSWORD:}
    authorize:
      url: ${LIBERATA_OAUTH2_AUTHORIZE_URL:https://bpacustomerportal.liberata.com/pba/public/oauth/authorize}
    token:
      url: ${LIBERATA_OAUTH2_TOKEN_URL:https://bpacustomerportal.liberata.com/pba/public/oauth/token}
  api:
    key: ${LIBERATA_API_KEY:}

user:
  info:
    size: ${USER_INFO_SIZE:300}
  lastModifiedTime: ${USER_LAST_MODIFIED_TIME:720d}

logging:
  level:
    org:
      springframework:
        web: DEBUG


notification:
  url: ${NOTIFICATION_API_URL:http://localhost:4300}
  letter-path: ${NOTIFICATION_LETTER_PATH:/letter}
  email-path: ${NOTIFICATION_EMAIL_PATH:/email}
  email-to-reply: ${EMAIL_TO_REPLY:j@dummy.com}
  service-mailbox: ${SERVICE_MAIL_BOX:dummy}
  service-url: ${SERVICE_URL:http://service}

valnotify:
  letter.apiKey: ${NOTIFICATION_LETTER_KEY:}
  letter.template: ${NOTIFICATION_LETTER_TEMPLATE_ID:}
  email.apiKey: ${NOTIFICATION_EMAIL_KEY:}
  email.template: ${NOTIFICATION_EMAIL_TEMPLATE_ID:}
