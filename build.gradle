plugins {
  id 'application'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.4.3'
  id 'org.owasp.dependencycheck' version '6.2.0'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'org.sonarqube' version '3.2.0'
  id 'uk.gov.hmcts.java' version '0.12.5'
}

apply from: 'liquibase.gradle'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

  sourceCompatibility = 11
  targetCompatibility = 11

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

test {
  finalizedBy jacocoTestReport
  jacoco {
    destinationFile = file("${project.rootDir}/build/jacoco/test.exec")
  }
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}
task smokeTest(type: Test, description: 'Runs the smoke tests', group: 'Verification') {
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}


project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.projectName", "Reform :: refunds-app"
    property "sonar.projectKey", "uk.gov.hmcts.reform:refunds-app"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'

}
apply from: "${rootDir}/cve-resolution-strategy.gradle"


dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.68'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '30.1.1-jre') {
      entry 'guava'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

def versions = [
  junit           : '5.7.2',
  junitPlatform   : '1.7.2',
  reformLogging   : '5.1.7',
  springBoot      : springBoot.class.package.implementationVersion,
  springfoxSwagger: '3.0.0',
  jacocoVersion: '0.8.5'
]

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

apply from: "${rootDir}/cve-resolution-strategy.gradle"

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  compile group: 'io.springfox', name: 'springfox-swagger-ui', version:'2.9.2'
  compile group: 'io.springfox', name: 'springfox-swagger2', version:'2.9.2'

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
//  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.8.RELEASE'
  implementation 'org.testng:testng:6.14.3'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit

  compileOnly group: 'net.sourceforge.findbugs', name: 'annotations', version: '1.3.2'

//  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'
  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
  compile group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.14.1'
//  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.1.RELEASE'
  compile group: 'io.github.openfeign', name: 'feign-jackson', version: '10.1.0'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.5.0.RELEASE'
  compile group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4'

  compile group: 'org.liquibase', name: 'liquibase-core', version: '3.8.2'
  compile(group: 'org.postgresql', name: 'postgresql', version: '42.2.13') {
    exclude(module: 'commons-logging')
    exclude(module: 'slf4j-simple')
  }
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  testImplementation group: 'junit', name: 'junit', version: '4.13'
  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.3.0'
  testCompile group: 'junit', name: 'junit', version: '4.13'
  testCompile group: 'org.testcontainers', name: 'postgresql', version: '1.15.1'
  testCompile group: 'org.springframework.security', name: 'spring-security-test', version: '5.2.1.RELEASE'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
  smokeTestAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

mainClassName = 'uk.gov.hmcts.reform.refunds.RefundApplication'

bootJar {
  getArchiveFileName().set(provider {
    'refunds-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

checkstyle {
  toolVersion "7.8.1"
}
checkstyleMain.enabled(false)
checkstyleTest.enabled(false)
checkstyleIntegrationTest.enabled(false)
pmdTest.enabled(false);

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
